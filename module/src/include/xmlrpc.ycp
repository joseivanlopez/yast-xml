/**
 * Module:		xmlrpc.ycp
 *
 * Authors:		Anas Nashif (nashif@suse.de)
 *
 * Purpose:		XML-RPC client interface
 *
 * $Id$
 */

{
    /**
     * Send a XML-RPC request to a given server
     * @param endpoint Server address as a HTTP URL
     * @param methodName method to call on server
     * @param params A list of parameters for the method
     * @example methodCall("http://www.advogato.org/XMLRPC", "test.capitalize", ["yast2"])
     *
     * @return A map with the methodResponse or a fault response with fault code and faultString.
     */

    global define map methodCall(
			     string endpoint,
			     string methodName,
			     list params)
	``{
	// first, translate to XML and save into string.
	string methodCallXML = SCR::Write(.xml.xmlrpc.string, $[],
				       $["methodName":methodName,
					 "params":params]
				       );
	// Send request and save response into string
	map methodResponseMap = (map) SCR::Execute(.curl.xmlrpc, endpoint, $["data":methodCallXML]);

	// Finally, convert XML response data into YCP
	map methodResponse = (map) SCR::Read(.xml.xmlrpc.string,methodResponseMap["output"]:"");

	return methodResponse;
    }



}
